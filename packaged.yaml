AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'tezos-consensus-kms-lambda

  A Serverless Application to sign Tezos Consensus Messages on AWS. Includes a KMS
  Key and DynamoDB High Watermark.

  '
Metadata:
  AWS::ServerlessRepo::Application:
    Name: tezos-consensus-kms-lambda
    Author: nicolasochem
    LastUpdated: '2023-11-02'
    Description: An app to sign Tezos Consensus Messages on AWS with KMS and DynamoDB.
    SpdxLicenseId: MIT
    LicenseUrl: s3://tezos-consensus-kms-lambda/b9f7ccd279c5f1881715bae350dff0b5
    Labels:
    - cryptocurrency
    - tezos
    - signing
    SemanticVersion: '0.3.0'
    SourceCodeUrl: https://github.com/midl-dev/tezos-consensus-kms-lambda
Globals:
  Function:
    Timeout: 3
    Runtime: nodejs18.x
Parameters:
  BakerAuthorizedKey:
    Type: String
    Description: The authorized key for the signer. This must be a secp256k1 Tezos-encoded
      public key starting with sppk.
Resources:
  TezosConsensusKey:
    Type: AWS::KMS::Key
    Properties:
      Description: KMS Key for Tezos Consensus
      KeyUsage: SIGN_VERIFY
      KeySpec: ECC_SECG_P256K1
      PendingWindowInDays: 7
      Enabled: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
        - Sid: Root account can manage the key
          Effect: Allow
          Principal:
            AWS:
              Fn::Sub: arn:aws:iam::${AWS::AccountId}:root
          Action: kms:*
          Resource: '*'
        - Sid: Allow use of the key
          Effect: Allow
          Principal:
            AWS:
              Fn::GetAtt:
              - ConsensusSignerRole
              - Arn
          Action:
          - kms:Sign
          - kms:GetPublicKey
          Resource: '*'
    Metadata:
      SamResourceId: TezosConsensusKey
  ConsensusSignerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
    Metadata:
      SamResourceId: ConsensusSignerRole
  ConsensusSignerPolicy:
    Type: AWS::IAM::Policy
    Properties:
      Roles:
      - Ref: ConsensusSignerRole
      PolicyName: LambdaKMSDynamoDBLogsPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          Resource:
            Fn::GetAtt:
            - DynamoDBTable
            - Arn
        - Effect: Allow
          Action:
          - kms:GetPublicKey
          - kms:Sign
          Resource:
            Fn::GetAtt:
            - TezosConsensusKey
            - Arn
        - Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource: '*'
    Metadata:
      SamResourceId: ConsensusSignerPolicy
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: publicKeyHash
        AttributeType: S
      - AttributeName: opType
        AttributeType: S
      KeySchema:
      - AttributeName: publicKeyHash
        KeyType: HASH
      - AttributeName: opType
        KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
    Metadata:
      SamResourceId: DynamoDBTable
  SignerConfigurator:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://tezos-consensus-kms-lambda/498f6245eb4ee9f80487a10a0c2195f2
      Handler: index.handler
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      Role:
        Fn::GetAtt:
        - ConsensusSignerRole
        - Arn
      Environment:
        Variables:
          KMS_KEY_ID:
            Fn::GetAtt:
            - TezosConsensusKey
            - Arn
    Metadata:
      SamResourceId: SignerConfigurator
  SignerLambdaEnv:
    Type: Custom::SignerLambdaEnv
    Properties:
      ServiceToken:
        Fn::GetAtt:
        - SignerConfigurator
        - Arn
    Metadata:
      SamResourceId: SignerLambdaEnv
  Signer:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://tezos-consensus-kms-lambda/00f9d2442db8528404aeb13eb7532dbf
      Handler: index.handler
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      Role:
        Fn::GetAtt:
        - ConsensusSignerRole
        - Arn
      Environment:
        Variables:
          BAKER_AUTHORIZED_KEY:
            Ref: BakerAuthorizedKey
          DYNAMODB_TABLE_NAME:
            Ref: DynamoDBTable
          KMS_KEY_ID:
            Fn::GetAtt:
            - TezosConsensusKey
            - Arn
          CONSENSUS_PUBLIC_KEY:
            Fn::GetAtt:
            - SignerLambdaEnv
            - publicKey
          CONSENSUS_PUBLIC_KEY_HASH:
            Fn::GetAtt:
            - SignerLambdaEnv
            - publicKeyHash
          SECRET_URL_PATH:
            Fn::GetAtt:
            - SignerLambdaEnv
            - randomString
    Metadata:
      SamResourceId: Signer
  SignerUrlPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunctionUrl
      FunctionName:
        Ref: Signer
      Principal: '*'
      FunctionUrlAuthType: NONE
    Metadata:
      SamResourceId: SignerUrlPermission
Outputs:
  PublicKey:
    Description: Consensus Public Key
    Value:
      Fn::GetAtt:
      - SignerLambdaEnv
      - publicKey
  PublicKeyHash:
    Description: Consensus Public Key Hash
    Value:
      Fn::GetAtt:
      - SignerLambdaEnv
      - publicKeyHash
  SignerURLPath:
    Description: Signer Secret URL path (get the URL from lambda console)
    Value:
      Fn::GetAtt:
      - SignerLambdaEnv
      - randomString
